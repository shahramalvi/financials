[
  {
    "id": "simple_1",
    "question": "Show me Apple's current stock price",
    "sql": "SELECT symbol, date, close FROM historical_prices WHERE symbol = 'AAPL' ORDER BY date DESC LIMIT 1",
    "category": "stock_price",
    "complexity": "simple",
    "intent": "latest_price",
    "success_count": 10,
    "explanation": "Single table query with specific company filter and ordering",
    "last_used": "2025-09-03T13:38:42.957572",
    "created_date": "2025-09-03T13:38:42.957581",
    "version": "1.0"
  },
  {
    "id": "simple_2",
    "question": "Give me all tech sector companies",
    "sql": "SELECT symbol, name, sector FROM sp500_constituents WHERE sector = 'Technology' ORDER BY name",
    "category": "company_info",
    "complexity": "simple",
    "intent": "sector_filter",
    "success_count": 8,
    "explanation": "Filter companies by sector",
    "last_used": "2025-09-03T13:38:42.957587",
    "created_date": "2025-09-03T13:38:42.957590",
    "version": "1.0"
  },
  {
    "id": "simple_3",
    "question": "What's Walmart's most recent quarterly revenue?",
    "sql": "SELECT symbol, revenue, date FROM income_statements_quarterly WHERE symbol = 'WMT' ORDER BY date DESC LIMIT 1",
    "category": "financial_metrics",
    "complexity": "simple",
    "intent": "latest_financial",
    "success_count": 12,
    "explanation": "Get latest financial metric for specific company",
    "last_used": "2025-09-03T13:38:42.957593",
    "created_date": "2025-09-03T13:38:42.957595",
    "version": "1.0"
  },
  {
    "id": "simple_4",
    "question": "Display Microsoft's current total assets",
    "sql": "SELECT symbol, totalAssets, date FROM balance_sheets_quarterly WHERE symbol = 'MSFT' ORDER BY date DESC LIMIT 1",
    "category": "balance_sheet",
    "complexity": "simple",
    "intent": "balance_sheet_item",
    "success_count": 9,
    "explanation": "Get latest balance sheet item for specific company",
    "last_used": "2025-09-03T13:38:42.957597",
    "created_date": "2025-09-03T13:38:42.957599",
    "version": "1.0"
  },
  {
    "id": "simple_5",
    "question": "How much free cash flow does Amazon generate?",
    "sql": "SELECT symbol, freeCashFlow, date FROM cash_flow_statements_quarterly WHERE symbol = 'AMZN' ORDER BY date DESC LIMIT 1",
    "category": "cash_flow",
    "complexity": "simple",
    "intent": "cash_flow_metric",
    "success_count": 11,
    "explanation": "Get latest cash flow metric for specific company",
    "last_used": "2025-09-03T13:38:42.957601",
    "created_date": "2025-09-03T13:38:42.957603",
    "version": "1.0"
  },
  {
    "id": "simple_6",
    "question": "List all companies in healthcare sector",
    "sql": "SELECT symbol, name, sector, headQuarter FROM sp500_constituents WHERE sector = 'Healthcare' ORDER BY name",
    "category": "company_info",
    "complexity": "simple",
    "intent": "sector_filter",
    "success_count": 7,
    "explanation": "Filter companies by healthcare sector",
    "last_used": "2025-09-03T13:38:42.957605",
    "created_date": "2025-09-03T13:38:42.957607",
    "version": "1.0"
  },
  {
    "id": "annual_1",
    "question": "Show Apple's annual revenue for the most recent year",
    "sql": "SELECT symbol, revenue, date, period FROM income_statements_annual WHERE symbol = 'AAPL' ORDER BY date DESC LIMIT 1",
    "category": "annual_financials",
    "complexity": "simple",
    "intent": "annual_revenue",
    "success_count": 15,
    "explanation": "Get latest annual revenue for specific company",
    "last_used": "2025-09-03T13:38:42.957609",
    "created_date": "2025-09-03T13:38:42.957611",
    "version": "1.0"
  },
  {
    "id": "annual_4",
    "question": "Display Amazon's total assets from last fiscal year",
    "sql": "SELECT symbol, totalAssets, totalLiabilities, date FROM balance_sheets_annual WHERE symbol = 'AMZN' ORDER BY date DESC LIMIT 1",
    "category": "annual_balance_sheet",
    "complexity": "simple",
    "intent": "annual_balance",
    "success_count": 13,
    "explanation": "Get annual balance sheet data",
    "last_used": "2025-09-03T13:38:42.957616",
    "created_date": "2025-09-03T13:38:42.957617",
    "version": "1.0"
  },
  {
    "id": "annual_6",
    "question": "Show me Google's yearly operating cash flow",
    "sql": "SELECT symbol, operatingCashFlow, freeCashFlow, date FROM cash_flow_statements_annual WHERE symbol = 'GOOGL' ORDER BY date DESC LIMIT 1",
    "category": "annual_cash_flow",
    "complexity": "simple",
    "intent": "annual_cash_flow",
    "success_count": 14,
    "explanation": "Get annual cash flow metrics",
    "last_used": "2025-09-03T13:38:42.957620",
    "created_date": "2025-09-03T13:38:42.957621",
    "version": "1.0"
  },
  {
    "id": "q2_2025_1",
    "question": "Which company generated the most revenue in Q2 2025?",
    "sql": "SELECT sc.name, isq.symbol, isq.revenue, isq.date FROM income_statements_quarterly isq JOIN sp500_constituents sc ON isq.symbol = sc.symbol WHERE isq.date >= '2025-04-01' AND isq.date <= '2025-06-30' AND isq.revenue IS NOT NULL ORDER BY isq.revenue DESC LIMIT 1",
    "category": "quarterly_revenue",
    "complexity": "simple",
    "intent": "quarterly_ranking",
    "success_count": 20,
    "explanation": "Q2 means April-June, use date range filtering with single SELECT",
    "last_used": "2025-09-03T13:38:42.957624",
    "created_date": "2025-09-03T13:38:42.957625",
    "version": "1.0"
  },
  {
    "id": "q2_2025_2",
    "question": "Show me the top revenue performer in Q2 2025",
    "sql": "SELECT sc.name, isq.symbol, isq.revenue, isq.date FROM income_statements_quarterly isq JOIN sp500_constituents sc ON isq.symbol = sc.symbol WHERE isq.date >= '2025-04-01' AND isq.date <= '2025-06-30' AND isq.revenue IS NOT NULL ORDER BY isq.revenue DESC LIMIT 1",
    "category": "quarterly_revenue",
    "complexity": "simple",
    "intent": "quarterly_ranking",
    "success_count": 18,
    "explanation": "Single SELECT statement for Q2 revenue query - avoid UNION or combining unrelated data",
    "last_used": "2025-09-03T13:38:42.957628",
    "created_date": "2025-09-03T13:38:42.957629",
    "version": "1.0"
  },
  {
    "id": "medium_1",
    "question": "Display the top 5 revenue-generating companies from recent quarters",
    "sql": "SELECT sc.symbol, sc.name, isq.revenue, isq.date FROM income_statements_quarterly isq JOIN sp500_constituents sc ON isq.symbol = sc.symbol WHERE isq.date >= '2025-01-01' AND isq.revenue IS NOT NULL ORDER BY isq.revenue DESC LIMIT 5",
    "category": "ranking",
    "complexity": "medium",
    "intent": "top_companies",
    "success_count": 25,
    "explanation": "Rank companies by revenue with JOIN and date filtering",
    "last_used": "2025-09-03T13:38:42.957632",
    "created_date": "2025-09-03T13:38:42.957633",
    "version": "1.0"
  },
  {
    "id": "medium_2",
    "question": "Compare stock performance between Apple and Microsoft recently",
    "sql": "SELECT symbol, date, close FROM historical_prices WHERE symbol IN ('AAPL', 'MSFT') AND date >= '2025-05-24' ORDER BY symbol, date DESC",
    "category": "comparison",
    "complexity": "medium",
    "intent": "price_comparison",
    "success_count": 22,
    "explanation": "Compare multiple companies over time period using IN clause",
    "last_used": "2025-09-03T13:38:42.957636",
    "created_date": "2025-09-03T13:38:42.957637",
    "version": "1.0"
  },
  {
    "id": "medium_3",
    "question": "Find technology companies with best profit margins",
    "sql": "SELECT sc.symbol, sc.name, ROUND((CAST(isq.netIncome AS REAL) / CAST(isq.revenue AS REAL)) * 100, 2) AS profit_margin FROM income_statements_quarterly isq JOIN sp500_constituents sc ON isq.symbol = sc.symbol WHERE sc.sector = 'Technology' AND isq.date >= '2025-01-01' AND isq.revenue > 0 AND isq.netIncome IS NOT NULL ORDER BY profit_margin DESC LIMIT 10",
    "category": "calculation",
    "complexity": "medium",
    "intent": "profit_margin",
    "success_count": 30,
    "explanation": "Calculate profit margins with sector filtering and mathematical operations",
    "last_used": "2025-09-03T13:38:42.957640",
    "created_date": "2025-09-03T13:38:42.957641",
    "version": "1.0"
  },
  {
    "id": "medium_4",
    "question": "List companies generating over $100 billion in revenue",
    "sql": "SELECT sc.symbol, sc.name, isq.revenue FROM income_statements_quarterly isq JOIN sp500_constituents sc ON isq.symbol = sc.symbol WHERE isq.revenue > 100000000000 AND isq.date >= '2025-01-01' ORDER BY isq.revenue DESC",
    "category": "filtering",
    "complexity": "medium",
    "intent": "revenue_threshold",
    "success_count": 19,
    "explanation": "Filter by revenue threshold with JOIN",
    "last_used": "2025-09-03T13:38:42.957644",
    "created_date": "2025-09-03T13:38:42.957645",
    "version": "1.0"
  },
  {
    "id": "medium_5",
    "question": "Calculate mean stock prices by sector",
    "sql": "SELECT sc.sector, ROUND(AVG(hp.close), 2) AS avg_price FROM historical_prices hp JOIN sp500_constituents sc ON hp.symbol = sc.symbol WHERE hp.date >= '2025-06-01' GROUP BY sc.sector ORDER BY avg_price DESC",
    "category": "aggregation",
    "complexity": "medium",
    "intent": "sector_analysis",
    "success_count": 35,
    "explanation": "Calculate sector averages using GROUP BY with JOIN",
    "last_used": "2025-09-03T13:38:42.957648",
    "created_date": "2025-09-03T13:38:42.957649",
    "version": "1.0"
  },
  {
    "id": "complex_1",
    "question": "Identify companies showing consistent revenue growth over 3 quarters",
    "sql": "WITH quarterly_revenue AS (\n                    SELECT symbol, date, revenue, \n                           LAG(revenue, 1) OVER (PARTITION BY symbol ORDER BY date) AS prev_quarter_1, \n                           LAG(revenue, 2) OVER (PARTITION BY symbol ORDER BY date) AS prev_quarter_2 \n                    FROM income_statements_quarterly \n                    WHERE date >= '2024-06-01'\n                ) \n                SELECT qr.symbol, sc.name, qr.revenue, qr.prev_quarter_1, qr.prev_quarter_2, qr.date \n                FROM quarterly_revenue qr \n                JOIN sp500_constituents sc ON qr.symbol = sc.symbol \n                WHERE qr.revenue > qr.prev_quarter_1 \n                  AND qr.prev_quarter_1 > qr.prev_quarter_2 \n                  AND qr.prev_quarter_1 IS NOT NULL \n                  AND qr.prev_quarter_2 IS NOT NULL \n                ORDER BY qr.revenue DESC",
    "category": "trend_analysis",
    "complexity": "complex",
    "intent": "growth_trend",
    "success_count": 45,
    "explanation": "Identify revenue growth trends using CTEs and window functions",
    "last_used": "2025-09-03T13:38:42.957652",
    "created_date": "2025-09-03T13:38:42.957656",
    "version": "1.0"
  },
  {
    "id": "complex_2",
    "question": "Find companies with strong revenue but manageable debt levels",
    "sql": "WITH latest_financials AS (\n                    SELECT i.symbol, i.revenue, b.longTermDebt \n                    FROM income_statements_quarterly i \n                    JOIN balance_sheets_quarterly b ON i.symbol = b.symbol \n                      AND ABS(JULIANDAY(i.date) - JULIANDAY(b.date)) <= 93 \n                    WHERE i.date >= '2025-01-01' AND b.date >= '2025-01-01'\n                ) \n                SELECT sc.symbol, sc.name, lf.revenue, lf.longTermDebt, \n                       ROUND(lf.revenue / NULLIF(lf.longTermDebt, 0), 2) AS revenue_to_debt_ratio \n                FROM latest_financials lf \n                JOIN sp500_constituents sc ON lf.symbol = sc.symbol \n                WHERE lf.longTermDebt > 0 \n                ORDER BY revenue_to_debt_ratio DESC LIMIT 15",
    "category": "financial_strength",
    "complexity": "complex",
    "intent": "quality_analysis",
    "success_count": 38,
    "explanation": "Complex financial analysis with multiple table joins and CTEs",
    "last_used": "2025-09-03T13:38:42.957660",
    "created_date": "2025-09-03T13:38:42.957662",
    "version": "1.0"
  },
  {
    "id": "edge_1",
    "question": "Search for data on fictional companies",
    "sql": "SELECT * FROM sp500_constituents WHERE symbol = 'NONEXISTENT'",
    "category": "error_handling",
    "complexity": "edge",
    "intent": "error_case",
    "success_count": 5,
    "explanation": "Handle non-existent companies gracefully",
    "last_used": "2025-09-03T13:38:42.957664",
    "created_date": "2025-09-03T13:38:42.957666",
    "version": "1.0"
  },
  {
    "id": "edge_2",
    "question": "Show stock data from Y2K era",
    "sql": "SELECT * FROM historical_prices WHERE date = '2000-01-01'",
    "category": "date_handling",
    "complexity": "edge",
    "intent": "historical_data",
    "success_count": 3,
    "explanation": "Handle dates outside data range",
    "last_used": "2025-09-03T13:38:42.957668",
    "created_date": "2025-09-03T13:38:42.957670",
    "version": "1.0"
  },
  {
    "id": "learned_20",
    "question": "Calculate the square root of revenue",
    "sql": "SELECT sc.name, isq.symbol, CAST(SQRT(NULLIF(isq.revenue, 0)) AS REAL) AS sqrt_revenue \nFROM income_statements_quarterly isq \nJOIN sp500_constituents sc ON isq.symbol = sc.symbol \nWHERE isq.date >= '2025-01-01' \nORDER BY isq.date DESC;",
    "category": "financial_metrics",
    "complexity": "simple",
    "intent": "general",
    "success_count": 3,
    "last_used": "2025-09-03T14:54:33.925762",
    "created_date": "2025-09-03T14:19:14.369751",
    "explanation": "Learned from successful execution",
    "version": "learned"
  },
  {
    "id": "learned_21",
    "question": "Show companies with the highest annual free cash flow",
    "sql": "SELECT c.symbol, c.name, a.freeCashFlow\nFROM cash_flow_statements_annual a\nJOIN sp500_constituents c ON a.symbol = c.symbol\nORDER BY a.freeCashFlow DESC\nLIMIT 10;",
    "category": "cash_flow",
    "complexity": "medium",
    "intent": "ranking",
    "success_count": 1,
    "last_used": "2025-09-03T14:22:50.306144",
    "created_date": "2025-09-03T14:22:50.306153",
    "explanation": "Learned from successful execution",
    "version": "learned"
  },
  {
    "id": "learned_22",
    "question": "Which companies have the strongest annual balance sheets (high equity)?",
    "sql": "SELECT sc.symbol, sc.name, ba.totalStockholdersEquity \nFROM balance_sheets_annual ba \nJOIN sp500_constituents sc ON ba.symbol = sc.symbol \nORDER BY ba.totalStockholdersEquity DESC \nLIMIT 10;",
    "category": "balance_sheet",
    "complexity": "simple",
    "intent": "annual_analysis",
    "success_count": 1,
    "last_used": "2025-09-03T14:23:13.106112",
    "created_date": "2025-09-03T14:23:13.106120",
    "explanation": "Learned from successful execution",
    "version": "learned"
  },
  {
    "id": "learned_23",
    "question": "Show the top 5 companies by annual net income",
    "sql": "SELECT sc.symbol, sc.name, ia.netIncome \nFROM income_statements_annual ia \nJOIN sp500_constituents sc ON ia.symbol = sc.symbol \nWHERE ia.date = (SELECT MAX(date) FROM income_statements_annual) \nORDER BY ia.netIncome DESC \nLIMIT 5;",
    "category": "financial_metrics",
    "complexity": "medium",
    "intent": "ranking",
    "success_count": 1,
    "last_used": "2025-09-03T14:23:38.469098",
    "created_date": "2025-09-03T14:23:38.469112",
    "explanation": "Learned from successful execution",
    "version": "learned"
  },
  {
    "id": "learned_24",
    "question": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Financial Database AI Assistant</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Inter', sans-serif;\n            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n            min-height: 100vh;\n            padding: 20px;\n            color: #2c3e50;\n        }\n\n        .container {\n            max-width: 1400px;\n            margin: 0 auto;\n            background: #ffffff;\n            border-radius: 20px;\n            box-shadow: 0 25px 80px rgba(0,0,0,0.08);\n            overflow: hidden;\n            border: 1px solid rgba(0,0,0,0.05);\n        }\n\n        .header {\n            background: #ffffff;\n            color: #2d3748;\n            padding: 40px 30px;\n            text-align: center;\n            position: relative;\n            overflow: hidden;\n            border-bottom: 1px solid #e2e8f0;\n        }\n\n        .header::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"50\" r=\"2\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"20\" cy=\"20\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"80\" cy=\"30\" r=\"1.5\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"30\" cy=\"80\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"70\" cy=\"70\" r=\"1\" fill=\"white\" opacity=\"0.1\"/></svg>');\n            animation: float 20s infinite linear;\n        }\n\n        @keyframes float {\n            0% { transform: translateX(-100px); }\n            100% { transform: translateX(100px); }\n        }\n\n        .header-icon {\n            width: 80px;\n            height: 80px;\n            background: #f8f9fa;\n            border-radius: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 auto 20px;\n            font-size: 40px;\n            backdrop-filter: blur(10px);\n            border: 1px solid #e2e8f0;\n            color: #2d3748;\n        }\n\n        .header h1 {\n            font-size: 2.8rem;\n            margin-bottom: 10px;\n            font-weight: 600;\n            letter-spacing: -0.5px;\n            position: relative;\n            z-index: 1;\n        }\n\n        .header p {\n            opacity: 0.95;\n            font-size: 1.2rem;\n            font-weight: 400;\n            position: relative;\n            z-index: 1;\n        }\n\n        .main-content {\n            display: block;\n            min-height: 700px;\n        }\n\n        .query-section {\n            padding: 40px;\n            background: #ffffff;\n            border-bottom: 1px solid #e2e8f0;\n        }\n\n        .sidebar {\n            background: #f8fafc;\n            padding: 40px 30px;\n            overflow-y: auto;\n        }\n\n        .query-form {\n            margin-bottom: 40px;\n        }\n\n        .form-group {\n            margin-bottom: 25px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 12px;\n            font-weight: 600;\n            color: #2d3748;\n            font-size: 1.1rem;\n        }\n\n        .question-input {\n            width: 100%;\n            padding: 20px;\n            border: 2px solid #e2e8f0;\n            border-radius: 12px;\n            font-size: 16px;\n            transition: all 0.3s ease;\n            resize: vertical;\n            min-height: 120px;\n            font-family: inherit;\n            background: #ffffff;\n        }\n\n        .question-input:focus {\n            outline: none;\n            border-color: #718096;\n            box-shadow: 0 0 0 3px rgba(113, 128, 150, 0.1);\n            transform: translateY(-1px);\n        }\n\n        .btn {\n            background: #2d3748;\n            color: white;\n            padding: 16px 32px;\n            border: none;\n            border-radius: 12px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-weight: 600;\n            position: relative;\n            overflow: hidden;\n            min-width: 180px;\n        }\n\n        .btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n            transition: left 0.5s;\n        }\n\n        .btn:hover::before {\n            left: 100%;\n        }\n\n        .btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(45, 55, 72, 0.2);\n            background: #4a5568;\n        }\n\n        .btn:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n\n        .results-section {\n            margin-top: 30px;\n        }\n\n        .result-card {\n            background: #ffffff;\n            border: 1px solid #e2e8f0;\n            border-radius: 12px;\n            padding: 25px;\n            margin-bottom: 25px;\n            transition: all 0.3s ease;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n        }\n\n        .result-card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n        }\n\n        .result-header {\n            display: flex;\n            align-items: center;\n            margin-bottom: 18px;\n            padding-bottom: 12px;\n            border-bottom: 2px solid #f7fafc;\n        }\n\n        .result-title {\n            font-weight: 600;\n            color: #2d3748;\n            font-size: 1.1rem;\n        }\n\n        .sql-query {\n            background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);\n            color: #e2e8f0;\n            padding: 20px;\n            border-radius: 10px;\n            font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', monospace;\n            font-size: 14px;\n            overflow-x: auto;\n            margin: 15px 0;\n            position: relative;\n        }\n\n        .sql-query::before {\n            content: 'SQL';\n            position: absolute;\n            top: 8px;\n            right: 12px;\n            font-size: 10px;\n            color: #a0aec0;\n            font-weight: 600;\n        }\n\n        .explanation {\n            background: linear-gradient(135deg, #f0fff4 0%, #e6fffa 100%);\n            border-left: 4px solid #38a169;\n            padding: 20px;\n            border-radius: 0 10px 10px 0;\n            margin: 15px 0;\n            font-size: 15px;\n            line-height: 1.6;\n        }\n\n        .data-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 20px 0;\n            font-size: 14px;\n            background: white;\n            border-radius: 10px;\n            overflow: hidden;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n        }\n\n        .data-table th,\n        .data-table td {\n            padding: 15px 12px;\n            text-align: left;\n            border-bottom: 1px solid #e2e8f0;\n        }\n\n        .data-table th {\n            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);\n            font-weight: 600;\n            color: #2d3748;\n            font-size: 13px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .data-table tr:hover {\n            background: #f7fafc;\n        }\n\n        .error {\n            background: linear-gradient(135deg, #fed7d7 0%, #feb2b2 100%);\n            border-left: 4px solid #e53e3e;\n            padding: 20px;\n            border-radius: 0 10px 10px 0;\n            color: #c53030;\n            font-weight: 500;\n        }\n\n        .loading {\n            text-align: center;\n            padding: 60px;\n            color: #718096;\n        }\n\n        .spinner {\n            border: 3px solid #f1f5f9;\n            border-top: 3px solid #2d3748;\n            border-radius: 50%;\n            width: 50px;\n            height: 50px;\n            animation: spin 1s linear infinite;\n            margin: 0 auto 25px;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        .schema-section h3 {\n            color: #2d3748;\n            margin-bottom: 20px;\n            font-size: 1.4rem;\n            font-weight: 600;\n        }\n\n        .table-info {\n            background: white;\n            border: 1px solid #e2e8f0;\n            border-radius: 12px;\n            margin-bottom: 20px;\n            overflow: hidden;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n            transition: all 0.3s ease;\n        }\n\n        .table-info:hover {\n            transform: translateY(-1px);\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        }\n\n        .table-header {\n            background: #2d3748;\n            color: white;\n            padding: 15px 20px;\n            font-weight: 600;\n            font-size: 15px;\n        }\n\n        .table-columns {\n            padding: 20px;\n        }\n\n        .column {\n            display: flex;\n            justify-content: space-between;\n            padding: 8px 0;\n            border-bottom: 1px solid #f7fafc;\n            transition: all 0.2s ease;\n        }\n\n        .column:last-child {\n            border-bottom: none;\n        }\n\n        .column:hover {\n            background: #f7fafc;\n            margin: 0 -20px;\n            padding: 8px 20px;\n            border-radius: 6px;\n        }\n\n        .column-name {\n            font-weight: 500;\n            color: #2d3748;\n        }\n\n        .column-type {\n            color: #718096;\n            font-size: 0.9em;\n            font-weight: 500;\n            background: #edf2f7;\n            padding: 2px 8px;\n            border-radius: 4px;\n        }\n\n        .examples {\n            margin-top: 30px;\n        }\n\n        .example-queries {\n            list-style: none;\n        }\n\n        .example-queries li {\n            background: white;\n            margin: 10px 0;\n            padding: 15px;\n            border-radius: 10px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            border: 1px solid #e2e8f0;\n            font-size: 14px;\n            position: relative;\n        }\n\n        .example-queries li:hover {\n            background: #f7fafc;\n            border-color: #718096;\n            transform: translateX(5px);\n            box-shadow: 0 4px 15px rgba(0,0,0,0.08);\n        }\n\n        .section-divider {\n            height: 2px;\n            background: linear-gradient(90deg, transparent, #e2e8f0, transparent);\n            margin: 30px 0;\n            border-radius: 1px;\n        }\n\n        .sidebar-content {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 40px;\n            max-width: 1400px;\n            margin: 0 auto;\n        }\n\n        @media (max-width: 768px) {\n            .sidebar-content {\n                grid-template-columns: 1fr;\n                gap: 30px;\n            }\n            \n            .header h1 {\n                font-size: 2.2rem;\n            }\n            \n            .query-section {\n                padding: 30px 20px;\n            }\n        }\n\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n\n        .stat-card {\n            background: white;\n            padding: 15px;\n            border-radius: 8px;\n            border: 1px solid #e2e8f0;\n            text-align: center;\n        }\n\n        .stat-number {\n            font-size: 1.5rem;\n            font-weight: 600;\n            color: #2d3748;\n        }\n\n        .stat-label {\n            font-size: 0.9rem;\n            color: #718096;\n            margin-top: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"header-icon\">\ud83d\udd0d</div>\n            <h1>Financial Database AI Assistant</h1>\n            <p>Ask questions about your financial data in natural language</p>\n        </div>\n        \n        <div class=\"main-content\">\n            <div class=\"query-section\">\n                <form class=\"query-form\" id=\"queryForm\">\n                    <div class=\"form-group\">\n                        <label for=\"question\">Ask a question about your financial data:</label>\n                        <textarea \n                            id=\"question\" \n                            class=\"question-input\" \n                            placeholder=\"e.g., What was the total revenue last month? or Show me the top 5 customers by sales\"\n                            required></textarea>\n                    </div>\n                    <button type=\"submit\" class=\"btn\" id=\"submitBtn\">\n                        \u26a1 Analyze Data\n                    </button>\n                </form>\n                \n                <div id=\"results\" class=\"results-section\"></div>\n            </div>\n            \n            <div class=\"sidebar\">\n                <div class=\"sidebar-content\">\n                    <div class=\"schema-section\">\n                        <h3>\ud83d\udcca Database Schema</h3>\n                        <div id=\"schemaInfo\">\n                            <div class=\"loading\">\n                                <div class=\"spinner\"></div>\n                                Loading database schema...\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"examples\">\n                        <h3>\ud83d\udca1 Example Questions</h3>\n                        <ul class=\"example-queries\" id=\"exampleQueries\">\n                            <li>Retrieve entries recorded within the past 30 days</li>\n                            <li>Compute year-to-date revenue</li>\n                            <li>Identify the customer with the greatest total sales</li>\n                            <li>Display month-over-month revenue trajectory</li>\n                            <li>List the 10 highest-value transactions</li>\n                            <li>Contrast this month\u2019s metrics with last month\u2019s</li>\n                            <li>Find transactions greater than $10,000</li>\n                            <li>Rank products by overall profitability</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        let currentSchema = {};\n\n        async function loadSchema() {\n            try {\n                const response = await fetch('/api/schema');\n                if (!response.ok) throw new Error('Schema API error');\n                const schema = await response.json();\n                if (schema && typeof schema === 'object' && Object.keys(schema).length > 0) {\n                    displaySchema(schema);\n                } else {\n                    displayDemoSchema();\n                }\n            } catch (error) {\n                console.log('Using demo schema for display');\n                displayDemoSchema();\n            }\n        }\n\n        function displayDemoSchema() {\n            const demoSchema = {\n                'customers': {\n                    columns: [\n                        { name: 'customer_id', type: 'INTEGER' },\n                        { name: 'name', type: 'VARCHAR(255)' },\n                        { name: 'email', type: 'VARCHAR(255)' },\n                        { name: 'created_date', type: 'DATE' }\n                    ],\n                    row_count: 1247\n                },\n                'transactions': {\n                    columns: [\n                        { name: 'transaction_id', type: 'INTEGER' },\n                        { name: 'customer_id', type: 'INTEGER' },\n                        { name: 'amount', type: 'DECIMAL(10,2)' },\n                        { name: 'transaction_date', type: 'DATETIME' },\n                        { name: 'status', type: 'VARCHAR(50)' }\n                    ],\n                    row_count: 5630\n                },\n                'products': {\n                    columns: [\n                        { name: 'product_id', type: 'INTEGER' },\n                        { name: 'product_name', type: 'VARCHAR(255)' },\n                        { name: 'category', type: 'VARCHAR(100)' },\n                        { name: 'price', type: 'DECIMAL(8,2)' }\n                    ],\n                    row_count: 892\n                }\n            };\n            displaySchema(demoSchema);\n        }\n\n        function displaySchema(schema) {\n            const schemaDiv = document.getElementById('schemaInfo');\n            let html = '';\n            \n            for (const [tableName, tableInfo] of Object.entries(schema)) {\n                html += `\n                    <div class=\"table-info\">\n                        <div class=\"table-header\">${tableName} (${tableInfo.row_count || 'N/A'} rows)</div>\n                        <div class=\"table-columns\">\n                `;\n                \n                tableInfo.columns.forEach(col => {\n                    html += `\n                        <div class=\"column\">\n                            <span class=\"column-name\">${col.name}</span>\n                            <span class=\"column-type\">${col.type}</span>\n                        </div>\n                    `;\n                });\n                \n                html += '</div></div>';\n            }\n            \n            schemaDiv.innerHTML = html;\n        }\n\n        document.getElementById('queryForm').addEventListener('submit', async function(e) {\n            e.preventDefault();\n            \n            const question = document.getElementById('question').value.trim();\n            const submitBtn = document.getElementById('submitBtn');\n            const resultsDiv = document.getElementById('results');\n            \n            if (!question) return;\n            \n            submitBtn.disabled = true;\n            submitBtn.textContent = '\ud83d\udd04 Analyzing...';\n            \n            // Show loading\n            resultsDiv.innerHTML = `\n                <div class=\"result-card\">\n                    <div class=\"result-header\">\n                        <span class=\"result-title\">\ud83e\udd16 AI Analysis</span>\n                    </div>\n                    <div class=\"loading\">\n                        <div class=\"spinner\"></div>\n                        Analyzing your question and generating SQL query...\n                    </div>\n                </div>\n            `;\n            \n            try {\n                const response = await fetch('/api/query', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({ question: question })\n                });\n                \n                const data = await response.json();\n                console.log('API Response:', data); // Debug log\n                displayResults(data, question);\n                \n            } catch (error) {\n                console.log('API error, using demo results:', error);\n                displayDemoResults(question);\n            } finally {\n                submitBtn.disabled = false;\n                submitBtn.textContent = '\u26a1 Analyze Data';\n            }\n        });\n\n        function displayResults(data, originalQuestion) {\n            const resultsDiv = document.getElementById('results');\n            \n            if (data.error) {\n                resultsDiv.innerHTML = `\n                    <div class=\"result-card\">\n                        <div class=\"error\">\n                            <strong>Error:</strong> ${data.error}\n                        </div>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Generate explanation based on question since API doesn't provide one\n            const explanation = generateExplanation(originalQuestion, data.sql_query);\n            \n            let html = `\n                <div class=\"result-card\">\n                    <div class=\"result-header\">\n                        <span class=\"result-title\">\ud83e\udd16 AI Analysis</span>\n                    </div>\n                    <div class=\"explanation\">${explanation}</div>\n                </div>\n                \n                <div class=\"result-card\">\n                    <div class=\"result-header\">\n                        <span class=\"result-title\">\ud83d\udd0d Generated SQL Query</span>\n                    </div>\n                    <div class=\"sql-query\">${data.sql_query}</div>\n                </div>\n            `;\n            \n            // Show similar examples if available\n            if (data.similar_examples && data.similar_examples.length > 0) {\n                html += `\n                    <div class=\"result-card\">\n                        <div class=\"result-header\">\n                            <span class=\"result-title\">\ud83d\udca1 Similar Examples Used</span>\n                        </div>\n                `;\n                \n                data.similar_examples.forEach((example, index) => {\n                    html += `\n                        <div style=\"margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 6px;\">\n                            <strong>Example ${index + 1}:</strong> ${example.question}<br>\n                            <small style=\"color: #666;\">Similarity: ${(example.similarity * 100).toFixed(1)}%</small>\n                        </div>\n                    `;\n                });\n                \n                html += '</div>';\n            }\n            \n            if (data.results && data.results.success) {\n                html += `\n                    <div class=\"result-card\">\n                        <div class=\"result-header\">\n                            <span class=\"result-title\">\ud83d\udcca Query Results</span>\n                        </div>\n                        <div class=\"stats-grid\">\n                            <div class=\"stat-card\">\n                                <div class=\"stat-number\">${data.results.row_count}</div>\n                                <div class=\"stat-label\">Total Rows</div>\n                            </div>\n                            <div class=\"stat-card\">\n                                <div class=\"stat-number\">${data.results.columns ? data.results.columns.length : 0}</div>\n                                <div class=\"stat-label\">Columns</div>\n                            </div>\n                        </div>\n                `;\n                \n                if (data.results.data && data.results.data.length > 0) {\n                    html += '<table class=\"data-table\"><thead><tr>';\n                    data.results.columns.forEach(col => {\n                        html += `<th>${col}</th>`;\n                    });\n                    html += '</tr></thead><tbody>';\n                    \n                    const rowsToShow = Math.min(50, data.results.data.length);\n                    for (let i = 0; i < rowsToShow; i++) {\n                        html += '<tr>';\n                        data.results.data[i].forEach(cell => {\n                            html += `<td>${cell !== null ? cell : 'NULL'}</td>`;\n                        });\n                        html += '</tr>';\n                    }\n                    \n                    html += '</tbody></table>';\n                    \n                    if (data.results.data.length > 50) {\n                        html += `<p><em>Showing first 50 rows of ${data.results.row_count} total rows</em></p>`;\n                    }\n                } else {\n                    html += '<p>No data found matching your query.</p>';\n                }\n                \n                html += '</div>';\n            } else if (data.results) {\n                html += `\n                    <div class=\"result-card\">\n                        <div class=\"error\">\n                            <strong>Query Error:</strong> ${data.results.error}\n                        </div>\n                    </div>\n                `;\n            }\n            \n            resultsDiv.innerHTML = html;\n        }\n\n        function generateExplanation(question, sqlQuery) {\n            const lowerQ = question.toLowerCase();\n            const lowerSQL = sqlQuery.toLowerCase();\n            \n            if (lowerSQL.includes('sum') && lowerSQL.includes('amount')) {\n                return \"I'll calculate the total amount by summing the relevant transaction amounts based on your criteria.\";\n            } else if (lowerSQL.includes('count') && lowerSQL.includes('*')) {\n                return \"I'll count the total number of records that match your specified conditions.\";\n            } else if (lowerSQL.includes('group by') && lowerSQL.includes('order by')) {\n                return \"I'll group the data by relevant categories and sort the results to show the most important information first.\";\n            } else if (lowerSQL.includes('join')) {\n                return \"I'll combine data from multiple tables to give you a comprehensive view of the information you requested.\";\n            } else if (lowerSQL.includes('limit')) {\n                return \"I'll limit the results to show you the most relevant entries based on your query.\";\n            } else {\n                return `I'll analyze your question \"${question}\" and retrieve the relevant data from your database.`;\n            }\n        }\n\n        function displayDemoResults(question) {\n            // Fallback demo results if API fails\n            const demoData = {\n                sql_query: `SELECT COUNT(*) as total_count, SUM(amount) as total_amount\nFROM transactions \nWHERE status = 'completed'\nAND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);`,\n                results: {\n                    success: true,\n                    row_count: 1,\n                    columns: ['total_count', 'total_amount'],\n                    data: [['342', '$45,678.90']]\n                }\n            };\n            displayResults(demoData, question);\n        }\n\n        document.getElementById('exampleQueries').addEventListener('click', function(e) {\n            if (e.target.tagName === 'LI') {\n                document.getElementById('question').value = e.target.textContent;\n                document.getElementById('question').focus();\n            }\n        });\n\n        document.getElementById('queryForm').addEventListener('submit', function() {\n            setTimeout(() => {\n                document.getElementById('results').scrollIntoView({ \n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }, 100);\n        });\n\n        loadSchema();\n    </script>\n</body>\n</html>",
    "sql": "SELECT sc.symbol, sc.name, hp.date, hp.close \nFROM historical_prices hp \nJOIN sp500_constituents sc ON hp.symbol = sc.symbol \nWHERE hp.date >= '2025-01-01' \nORDER BY hp.close DESC \nLIMIT 5;",
    "category": "stock_price",
    "complexity": "medium",
    "intent": "ranking",
    "success_count": 1,
    "last_used": "2025-09-03T14:56:49.883060",
    "created_date": "2025-09-03T14:56:49.883078",
    "explanation": "Learned from successful execution",
    "version": "learned"
  },
  {
    "id": "learned_25",
    "question": "Show companies with more than $100 billion in revenue",
    "sql": "SELECT sc.symbol, sc.name, isq.revenue \nFROM income_statements_annual isq \nJOIN sp500_constituents sc ON isq.symbol = sc.symbol \nWHERE isq.revenue > 100000000000 \nORDER BY isq.revenue DESC;",
    "category": "financial_metrics",
    "complexity": "medium",
    "intent": "general",
    "success_count": 4,
    "last_used": "2025-09-03T16:31:31.505945",
    "created_date": "2025-09-03T14:57:40.877465",
    "explanation": "Learned from successful execution",
    "version": "learned"
  }
]